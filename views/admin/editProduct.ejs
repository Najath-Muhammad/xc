<%- include('../../views/partials/admin/header') %>
<style>
    .image-preview {
        max-width: 300px;
        max-height: 300px;
        margin: 10px 0;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .cropper-container {
        max-width: 500px;
        margin: 20px 0;
    }

    .cropped-preview {
        width: 200px;
        height: 200px;
        object-fit: cover;
        margin: 10px 0;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .crop-actions {
        display: flex;
        gap: 10px;
        margin: 10px 0;
    }

    .image-input-container {
        margin-bottom: 30px;
        border: 1px solid #ddd;
        padding: 15px;
        border-radius: 8px;
        background-color: #fff;
    }

    .error-message {
        color: red;
        font-size: 0.875rem;
        margin-top: 5px;
        display: none;
    }

    .thumbnail {
        width: 50px;
        height: auto;
        margin-right: 10px;
    }

    .remove-icon {
        cursor: pointer;
        margin-left: .5rem;
        color: #dc3545;
    }

    .existing-images {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
    }

    .existing-image-container {
        display: flex;
        align-items: center;
        background-color: #f8f9fa;
        padding: 5px;
        border-radius: 4px;
    }
</style>

<div class="main-content">
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form id="addProductForm" method="post" action="/admin/editProducts/<%=product._id%>" enctype="multipart/form-data" onsubmit="return validateAndSubmit(event)">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" name="productName" value="<%=product.productName%>" class="form-control" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="col-lg-4 mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select" name="brand" id="brand">
                                    <%for(let i=0;i<brand.length;i++){%>
                                        <option value="<%=brand[i].brandName%>"><%=product.brand%></option>
                                    <%}%>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea name="descriptionData" class="form-control" rows="4" id="description"><%=product.description%></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="â‚¹" name="regularPrice" type="text" value="<%=product.regularPrice%>" class="form-control" id="regularPrice">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input name="salePrice" type="text" value="<%=product.salePrice%>" class="form-control" id="salePrice">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input name="quantity" type="text" value="<%=product.quantity%>" class="form-control" id="quantity">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" value="<%=product.color%>" class="form-control" id="color">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" name="category" id="category">
                                            <%for(let i=0;i<cat.length;i++){%>
                                                <option value="<%=cat[i].name%>"><%=product.category.name%></option>
                                            <%}%>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>
                                <div class="card-body">
                                    <!-- Existing Images Section -->
                                    <div class="mb-4">
                                        <h5>Current Images: <span class="badge bg-secondary" id="selected-image-count">0</span>/3</h5>
                                        <div class="existing-images d-flex flex-wrap gap-3">
                                            <% if (product.productImage && product.productImage.length > 0) { %>
                                                <% for (let i = 0; i < product.productImage.length; i++) { %>
                                                    <div class="existing-image-container p-2 border rounded">
                                                        <input type="checkbox" class="existing-image-checkbox" id="existing-<%= i %>" 
                                                               value="<%= product.productImage[i] %>" name="existingImages"
                                                               checked onchange="updateImageCount()">
                                                        <label for="existing-<%= i %>" class="ms-2">
                                                            <img class="thumbnail" src="/uploads/re-image/<%= product.productImage[i] %>" alt="">
                                                            <span class="ms-2">Keep</span>
                                                        </label>
                                                    </div>
                                                <% } %>
                                            <% } else { %>
                                                <p>No existing images for this product.</p>
                                            <% } %>
                                        </div>
                                    </div>

                                    <!-- New Image Upload Section -->
                                    <div class="mt-4">
                                        <h5>Add New Images: <span id="new-image-message">You can add up to 3 new images</span></h5>
                                        <div class="row">
                                            <% for (let i = 1; i <= 3; i++) { %>
                                                <div class="col-md-4">
                                                    <div class="mb-4 p-3 border rounded">
                                                        <label for="input<%= i %>" class="form-label">Image <%= i %></label>
                                                        <input type="file" 
                                                               class="form-control new-image-input" 
                                                               id="input<%= i %>" 
                                                               name="images" 
                                                               accept="image/*"
                                                               onchange="viewImage(event, '<%= i %>'); updateImageCount();">
                                                        <div class="image-cropper mt-2" style="display:none;">
                                                            <img src="" id="croppedImg<%= i %>" alt="" style="max-width: 100%;">
                                                            <div class="mt-2">
                                                                <button type="button" id="saveButton<%= i %>" class="btn btn-primary btn-sm">Save Cropped Image</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="text-end">
                                <button class="btn btn-primary" type="submit">Update Product</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://kit.fontawesome.com/your-font-awesome-kit.js"></script>

<script>
   const croppers = {};
    
    async function validateAndSubmit(event) {
        event.preventDefault();

        // Validate the form first
        if (!validateForm()) {
            return; // Stop submission if validation fails
        }

        // Handle the cropped images first
        await processCroppedImages();

        const form = document.getElementById('addProductForm');
        const formData = new FormData(form);

        // Make sure we have all the existing images in the form data
        const existingImageContainers = document.querySelectorAll('.existing-image-container');
        if (existingImageContainers.length === 0) {
            // If there are no existing images, make sure formData doesn't have existingImages
            formData.delete('existingImages');
        }

        // Log FormData entries for debugging
        console.log('FormData entries before submission:');
        for (let pair of formData.entries()) {
            console.log(`${pair[0]}: ${pair[1]}`);
        }

        try {
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData,
            });

            if (response.redirected) {
                window.location.href = response.url;
            } else {
                const data = await response.json();
                if (data.error) {
                    alert(data.error);
                }
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while submitting the form.');
        }
    }

    async function processCroppedImages() {
        const promises = [];
        
        // Process only the inputs that have files
        for (let i = 1; i <= 3; i++) {
            const input = document.getElementById(`input${i}`);
            if (input.files && input.files.length > 0 && croppers[i]) {
                promises.push(processCroppedImage(i, input));
            }
        }
        
        await Promise.all(promises);
    }

    async function processCroppedImage(index, input) {
        return new Promise((resolve) => {
            if (croppers[index]) {
                const cropper = croppers[index];
                const croppedCanvas = cropper.getCroppedCanvas();
                if (croppedCanvas) {
                    croppedCanvas.toBlob(blob => {
                        const timestamp = new Date().getTime();
                        const fileName = `cropped-img-${timestamp}-${index}.png`;
                        const imgFile = new File([blob], fileName, { type: 'image/jpeg' });
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files;
                        resolve();
                    }, 'image/jpeg');
                } else {
                    resolve();
                }
            } else {
                resolve();
            }
        });
    }


    function validateForm() {
        clearErrorMessages();
        const name = document.getElementById('product_name').value;
        const description = document.getElementById('description').value;
        const brand = document.getElementById('brand').value;
        const price = document.getElementById('regularPrice').value;
        const saleprice = document.getElementById('salePrice').value;
        const color = document.getElementById('color').value;
        const category = document.getElementById('category').value;
        const quantity = document.getElementById('quantity').value;

        let isValid = true;

        if (name.trim() === "") {
            displayErrorMessage('productName-error', 'Please enter a product name.');
            isValid = false;
        }

        if (description.trim() === "") {
            displayErrorMessage('description-error', 'Please enter a product description.');
            isValid = false;
        }

        if (quantity === '' || (quantity) < 0) {
            displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
            isValid = false;
        }

        if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }

        if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
            displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }

        if (color.trim() === "") {
            displayErrorMessage('color-error', 'Please enter a color.');
            isValid = false;
        }

        return isValid;
    }

    function displayErrorMessage(elementId, message) {
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = '';
            element.style.display = 'none';
        });
    }

    function viewImage(event, index) {
        let input = event.target;
        if (!input.files || input.files.length === 0) return;
        
        let reader = new FileReader();
        reader.onload = function () {
            let dataURL = reader.result;
            let image = document.getElementById('croppedImg' + index);
            image.src = dataURL;
            let cropperContainer = image.parentNode;
            cropperContainer.style.display = 'block';
            
            // Destroy existing cropper if it exists
            if (croppers[index]) {
                croppers[index].destroy();
            }
            
            // Create new cropper
            let cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 1,
                zoomable: true
            });
            croppers[index] = cropper;
            
            let saveButton = document.getElementById('saveButton' + index);
            saveButton.onclick = function() {
                let croppedCanvas = cropper.getCroppedCanvas();
                let croppedImage = document.getElementById("croppedImg" + index);
                croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
                cropperContainer.style.display = 'none';
            };
        };
        reader.readAsDataURL(input.files[0]);
    }

    function deleteSingleImage(imageId, productId) {
        if (confirm('Are you sure you want to delete this image?')) {
            $.ajax({
                url: '/admin/deleteImage',
                method: 'post',
                data: {
                    imageNameToServer: imageId,
                    productIdToServer: productId
                },
                success: function (response) {
                    if (response.status === true) {
                        window.location.reload();
                    }
                }
            });
        }
    }

    // Preload existing images into the cropper
    document.addEventListener('DOMContentLoaded', function () {
        const existingImages = document.querySelectorAll('.existing-image-container img');
        existingImages.forEach((img, index) => {
            const imageUrl = img.src;
            const imageElement = document.getElementById(`croppedImg${index + 1}`);
            if (imageElement) {
                imageElement.src = imageUrl;
                const cropperContainer = imageElement.parentNode;
                cropperContainer.style.display = 'block';
                const cropper = new Cropper(imageElement, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true
                });
                croppers[index + 1] = cropper;
                const saveButton = document.getElementById(`saveButton${index + 1}`);
                saveButton.addEventListener('click', async function () {
                    const croppedCanvas = cropper.getCroppedCanvas();
                    const croppedImage = document.getElementById(`croppedImg${index + 1}`);
                    croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
                    const timestamp = new Date().getTime();
                    const fileName = `cropped-img-${timestamp}-${index + 1}.png`;
                    await croppedCanvas.toBlob(blob => {
                        const imgFile = new File([blob], fileName, { type: 'image/jpeg' });
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        const input = document.getElementById(`input${index + 1}`);
                        input.files = fileList.files;
                    });
                    cropperContainer.style.display = 'none';
                });
            }
        });
    });
</script>
</body>
</html>