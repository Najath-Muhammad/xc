<%- include('../../views/partials/admin/header') %>
<style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        h1, h2 {
            color: #333;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            font-weight: bold;
            margin-bottom: 5px;
            display: block;
        }

        input[type="text"], textarea, input[type="number"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }

        textarea {
            resize: vertical;
        }

        button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
        }

        .btn-primary {
            background-color: #007bff;
            color: #fff;
        }

        .btn-info {
            background-color: #17a2b8;
            color: #fff;
        }

        .btn-warning {
            background-color: #ffc107;
            color: #fff;
        }

        .btn-success {
            background-color: #28a745;
            color: #fff;
        }

        .btn-danger {
            background-color: #dc3545;
            color: #fff;
        }

        .btn-sm {
            font-size: 14px;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            padding: 10px;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            margin-bottom: 20px;
        }

        .category-list {
            margin-top: 40px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        .btn-list {
            background-color: #007bff;
            color: white;
        }

        .btn-unlist {
            background-color: #dc3545;
            color: white;
        }

        .form-select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 10px;
            min-width: 200px;
        }

        .ms-2 {
            margin-left: 0.5rem;
        }

        .table-actions {
            display: flex;
            gap: 10px;
        }
    </style>


    <div class="main-content">
        <div class="container">
            
            <div class="form-group">
                <label for="name">Category Name</label>
                <input type="text" id="name" name="name" placeholder="Enter category name" required>
            </div>
            <div class="form-group">
                <label for="description">Category Description</label>
                <textarea id="description" name="description" placeholder="Enter category description" rows="4" required></textarea>
            </div>
            <button class="btn btn-primary" onclick="submitCategory()">Add Category</button>

            <div id="error-container" class="alert-danger" style="display: none;">
                <ul></ul>
            </div>

            <h2>Existing Categories</h2>
            <div class="category-list">
                <% if (cat && cat.length) { %>
                    <table>
                        <thead>
                            <tr>
                                <th>Category Name</th>
                                <th>Description</th>
                                <th>Status</th>
                                <th>Offer</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% cat.forEach(category => { %>
                                <tr>
                                    <td><strong><%= category.name %></strong></td>
                                    <td><%= category.description %></td>
                                    <td id="status-<%= category._id %>">
                                        <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                    </td>
                                    <td>
                                        <% 
                                        const appliedOffer = offers.find(offer => 
                                            offer.category && 
                                            Array.isArray(offer.category) && 
                                            offer.category.some(catId => catId.toString() === category._id.toString()) && 
                                            offer.isActive
                                        );
                                        %>
                                        <% if (appliedOffer) { %>
                                            <%= appliedOffer.name %> (<%= appliedOffer.discount %>%)
                                            <button class="btn btn-danger btn-sm ms-2" 
                                                    onclick="removeOffer('<%= category._id %>', '<%= appliedOffer._id %>')">
                                                Remove
                                            </button>
                                        <% } else { %>
                                            No offer applied
                                        <% } %>
                                    </td>
                                    <td class="table-actions">
                                        <select class="form-select" id="offer-select-<%= category._id %>" 
                                                onchange="applyOffer('<%= category._id %>', this.value)">
                                            <option value="">Select an offer</option>
                                            <% offers.forEach(offer => { %>
                                                <% if (offer.isActive) { %>
                                                    <option value="<%= offer._id %>"
                                                        <%= (appliedOffer && appliedOffer._id.toString() === offer._id.toString()) ? 'selected' : '' %>>
                                                        <%= offer.name %> (<%= offer.discount %>%)
                                                    </option>
                                                <% } %>
                                            <% }) %>
                                        </select>
                                        <button class="btn btn-info btn-sm">
                                            <a href="/admin/editCategory?id=<%= category._id %>" 
                                               style="text-decoration: none; color: white;">Edit</a>
                                        </button>
                                        <button id="list-unlist-btn-<%= category._id %>" 
                                                class="btn <%= category.isListed ? 'btn-unlist' : 'btn-list' %>"
                                                onclick="<%= category.isListed ? 'unlistCategory' : 'listCategory' %>('<%= category._id %>')">
                                            <%= category.isListed ? 'Unlist' : 'List' %>
                                        </button>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                <% } else { %>
                    <p>No categories found.</p>
                <% } %>

                <nav>
                    <ul class="pagination justify-content-center">
                        <% for (let i = 1; i <= totalPages; i++) { %>
                            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                            </li>
                        <% } %>
                    </ul>
                </nav>
            </div>
        </div>
    </div>


<script>
    async function submitCategory() {
        const name = document.getElementById("name").value;
        const description = document.getElementById("description").value;
        const errors = [];

        if (!name || !description) {
            errors.push('All fields are required.');
        }

        if (errors.length) {
            displayErrors(errors);
            return;
        }

        try {
            const response = await fetch('/admin/addCategory', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, description })
            });

            const data = await response.json();

            if (data.status) {
                Swal.fire({
                    icon: 'success',
                    title: 'Category added successfully!',
                    timer: 1500
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error adding category',
                    text: data.message || 'Something went wrong.'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred.'
            });
        }
    }

    function displayErrors(errors) {
        const errorContainer = document.getElementById('error-container');
        const errorList = errorContainer.querySelector('ul');
        errorList.innerHTML = '';
        errors.forEach(error => {
            const li = document.createElement('li');
            li.textContent = error;
            errorList.appendChild(li);
        });
        errorContainer.style.display = 'block';
    }

    async function applyOffer(categoryId, offerId) {
        if (!offerId) return;

        try {
            const response = await fetch('/admin/applyCategoryOffer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ categoryId, offerId })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Offer applied successfully!',
                    timer: 1500
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error applying offer',
                    text: data.message || 'Something went wrong.'
                });
            }
        } catch (error) {
            console.error('Error applying offer:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred.'
            });
        }
    }

    async function removeOffer(categoryId, offerId) {
        try {
            const response = await fetch('/admin/removeCategoryOffer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ categoryId, offerId })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Offer removed successfully!',
                    timer: 1500
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error removing offer',
                    text: data.message || 'Something went wrong.'
                });
            }
        } catch (error) {
            console.error('Error removing offer:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred.'
            });
        }
    }

    async function listCategory(categoryId) {
        try {
            const response = await fetch(`/admin/category/${categoryId}/list`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: categoryId })
            });

            const data = await response.json();
            if (data.success) {
                updateCategoryStatus(categoryId, true);
                window.location.reload();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error listing category',
                    text: data.message
                });
            }
        } catch (error) {
            console.error('Error listing category:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred.'
            });
        }
    }

    async function unlistCategory(categoryId) {
        try {
            const response = await fetch(`/admin/category/${categoryId}/unlist`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: categoryId })
            });

            const data = await response.json();
            if (data.success) {
                updateCategoryStatus(categoryId, false);
                window.location.reload();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error unlisting category',
                    text: data.message
                });
            }
        } catch (error) {
            console.error('Error unlisting category:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred.'
            });
        }
    }

    function updateCategoryStatus(categoryId, isListed) {
        const statusCell = document.getElementById(`status-${categoryId}`);
        const actionButton = document.getElementById(`list-unlist-btn-${categoryId}`);

        if (statusCell && actionButton) {
            if (isListed) {
                statusCell.textContent = 'Listed';
                actionButton.textContent = 'Unlist';
                actionButton.classList.remove('btn-list');
                actionButton.classList.add('btn-unlist');
                actionButton.setAttribute('onclick', `unlistCategory('${categoryId}')`);
            } else {
                statusCell.textContent = 'Unlisted';
                actionButton.textContent = 'List';
                actionButton.classList.remove('btn-unlist');
                actionButton.classList.add('btn-list');
                actionButton.setAttribute('onclick', `listCategory('${categoryId}')`);
            }
        }
    }
</script>

</body>

</html>