<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Category Management</title>
    <link rel="stylesheet" href="/path/to/your/css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        /* General Container Styling */
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            font-family: Arial, sans-serif;
        }

        /* Heading Styles */
        h1,
        h2 {
            color: #333;
            margin-bottom: 20px;
        }

        /* Form Styling */
        .form-group {
            margin-bottom: 15px;
        }

        label {
            font-weight: bold;
            margin-bottom: 5px;
            display: block;
        }

        input[type="text"],
        textarea,
        input[type="number"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }

        textarea {
            resize: vertical;
        }

        button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
        }

        /* Button Colors */
        .btn-primary {
            background-color: #007bff;
            color: #fff;
        }

        .btn-info {
            background-color: #17a2b8;
            color: #fff;
        }

        .btn-warning {
            background-color: #ffc107;
            color: #fff;
        }

        .btn-success {
            background-color: #28a745;
            color: #fff;
        }

        .btn-sm {
            font-size: 14px;
        }

        /* Error Display Styling */
        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            padding: 10px;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            margin-bottom: 20px;
        }

        #error-container ul {
            list-style-type: none;
            padding-left: 0;
        }

        /* Category List Styling */
        .category-list {
            margin-top: 40px;
        }

        .category-list ul {
            list-style-type: none;
            padding-left: 0;
        }

        .category-list li {
            background-color: #f9f9f9;
            padding: 15px;
            border: 1px solid #ddd;
            margin-bottom: 10px;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .category-list li span {
            padding: 5px 10px;
            border-radius: 4px;
            font-weight: bold;
        }

        .badge-success {
            background-color: #28a745;
            color: #fff;
        }

        .badge-secondary {
            background-color: #6c757d;
            color: #fff;
        }

        /* Pagination Styles */
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 30px;
        }

        .page-item {
            margin: 0 5px;
        }

        .page-item a {
            text-decoration: none;
            padding: 10px 15px;
            border-radius: 4px;
            color: #007bff;
        }

        .page-item.active a {
            background-color: #007bff;
            color: #fff;
        }

        .page-item a:hover {
            background-color: #0056b3;
            color: #fff;
        }

        /* Offer Action Buttons for Each Category */
        .offer-action-btns {
            display: flex;
            gap: 10px;
        }

        .offer-action-btns button {
            padding: 8px 15px;
            border-radius: 4px;
            font-size: 14px;
        }

        .btn-add-offer {
            background-color: #28a745;
            color: white;
        }

        .btn-remove-offer {
            background-color: #dc3545;
            color: white;
        }

        .offer-action-btns button:hover {
            opacity: 0.8;
        }

        /* List/Unlist Buttons */
        .list-unlist-btns {
            display: flex;
            gap: 10px;
        }

        .btn-list {
            background-color: #007bff;
            color: white;
        }

        .btn-unlist {
            background-color: #dc3545;
            color: white;
        }

    </style>
</head>

<body>
    <div class="container">
        <h1>Category Management</h1>
        <!-- Category Form -->
        <div class="form-group">
            <label for="name">Category Name</label>
            <input type="text" id="name" name="name" placeholder="Enter category name" required>
        </div>
        <div class="form-group">
            <label for="description">Category Description</label>
            <textarea id="description" name="description" placeholder="Enter category description" rows="4" required></textarea>
        </div>
        <button class="btn btn-primary" onclick="submitCategory()">Add Category</button>

        <!-- Error container for validation -->
        <div id="error-container" class="alert-danger" style="display: none;">
            <ul></ul>
        </div>

        <!-- Category List -->
        <h2>Existing Categories</h2>
        <div class="category-list">
            <% if (cat && cat.length) { %>
                <ul>
                    <% cat.forEach(category => { %>
                        <li>
                            <strong><%= category.name %></strong> - <%= category.description %>
                            <span class="badge <%= category.isListed ? 'badge-success' : 'badge-secondary' %>">
                                <%= category.isListed ? 'Listed' : 'Unlisted' %>
                            </span>
                            <div class="offer-section">
                                <p>Current Offer: 
                                    <% if (category.categoryOffer) { %>
                                        <%= category.categoryOffer %>% 
                                    <% } else { %>
                                        0%
                                    <% } %>
                                </p>
                                <input type="number" id="offer-amount-<%= category._id %>" class="form-control offer-input" placeholder="Enter Offer %" min="0" max="100">
                                <% if (category.categoryOffer === 0) { %>
                                    <button class="btn btn-add-offer" onclick="addOffer('<%= category._id %>')">Add Offer</button>
                                <% } else { %>
                                    <button class="btn btn-remove-offer" onclick="removeOffer('<%= category._id %>')">Remove Offer</button>
                                <% } %>
                            </div>
                           
                            <div class="list-unlist-btns">
                                <% if (!category.isListed) { %>
                                    <button class="btn btn-list" onclick="listCategory('<%= category._id %>')">List</button>
                                <% } else { %>
                                    <button class="btn btn-unlist" onclick="unlistCategory('<%= category._id %>')">Unlist</button>
                                <% } %>
                                <button class="btn btn-info btn-sm" onclick="editCategory('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')"><a href="/admin/editCategory?id=<%=category._id%>" style="text-decoration: none;">Edit</a></button>
                            </div>
                            
                        </li>
                    <% }) %> <!-- Closing forEach function -->
                </ul>
            <% } else { %>
                <p>No categories found.</p>
            <% } %>
        </div>
        
    <script>
        // Add Offer for a Category
        async function addOffer(categoryId) {
            const amountInput = document.getElementById(`offer-amount-${categoryId}`);
            const amount = parseInt(amountInput.value, 10);
            
            if (isNaN(amount) || amount < 0 || amount > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Offer Amount',
                    text: 'Please enter a valid percentage between 0 and 100.',
                });
                return;
            }

            const response = await fetch('/admin/addCategoryOffer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ percentage: amount, categoryId })
            });

            const data = await response.json();
            if (data.success) {
                Swal.fire({ icon: 'success', title: 'Offer added successfully!', timer: 1500 }).then(() => location.reload());
            } else {
                Swal.fire({ icon: 'error', title: 'Error adding offer', text: data.message });
            }
        }

        // Remove Offer for a Category
        async function removeOffer(categoryId) {
            const response = await fetch('/admin/removeCategoryOffer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ categoryId })
            });

            const data = await response.json();
            if (data.success) {
                Swal.fire({ icon: 'success', title: 'Offer removed successfully!', timer: 1500 }).then(() => location.reload());
            } else {
                Swal.fire({ icon: 'error', title: 'Error removing offer', text: data.message });
            }
        }

        // List Category
       // List Category
function listCategory(categoryId) {
    fetch(`/admin/category/${categoryId}/list`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: categoryId }) // Send categoryId in body
    })
    .then(response => response.json())
    .then(data => data.success ? alert('Category listed successfully!') : alert('Error listing category'))
    .catch(() => alert('Error listing category'));
}

// Unlist Category
function unlistCategory(categoryId) {
    fetch(`/admin/category/${categoryId}/unlist`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: categoryId }) // Send categoryId in body
    })
    .then(response => response.json())
    .then(data => data.success ? alert('Category unlisted successfully!') : alert('Error unlisting category'))
    .catch(() => alert('Error unlisting category'));
}


        // Validate Category Form
       // Validate Category Form and Submit to Server
async function submitCategory() {
    const name = document.getElementById("name").value;
    const description = document.getElementById("description").value;
    const errors = [];

    if (!name || !description) {
        errors.push('All fields are required.');
    }

    if (errors.length) {
        displayErrors(errors);
        return;
    }

    // Submit the form to the server
    const response = await fetch('/admin/addCategory', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, description })
    });

    const data = await response.json();

    if (data.success) {
        Swal.fire({
            icon: 'success',
            title: 'Category added successfully!',
            timer: 1500
        }).then(() => {
            location.reload();  // Reload the page to reflect the new category
        });
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Error adding category',
            text: data.message || 'Something went wrong.'
        });
    }
}


        function displayErrors(errors) {
            const errorContainer = document.getElementById("error-container");
            const ul = errorContainer.querySelector("ul");
            ul.innerHTML = ''; // Clear previous errors

            errors.forEach(error => {
                const li = document.createElement("li");
                li.textContent = error;
                ul.appendChild(li);
            });

            errorContainer.style.display = 'block'; // Show error container
        }
    </script>
</body>

</html>
